[{"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js":"1","C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js":"3","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Sidebar.js":"4","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js":"5","C:\\Users\\baban\\Documents\\project\\frontend\\src\\pages\\Item.js":"6","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js":"7","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js":"8","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js":"9","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Buying.js":"10"},{"size":584,"mtime":1614157819267,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1144,"mtime":1610171545272,"results":"14","hashOfConfig":"12"},{"size":1589,"mtime":1608364098277,"results":"15","hashOfConfig":"12"},{"size":532,"mtime":1610170547943,"results":"16","hashOfConfig":"12"},{"size":202,"mtime":1608037480411,"results":"17","hashOfConfig":"12"},{"size":11454,"mtime":1615436191836,"results":"18","hashOfConfig":"12"},{"size":172,"mtime":1608131566916,"results":"19","hashOfConfig":"12"},{"size":201,"mtime":1608174481299,"results":"20","hashOfConfig":"12"},{"size":12453,"mtime":1615468699807,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"jwp6b1",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js",[],["46","47"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Sidebar.js",["48"],"import React from 'react';\r\nimport '../App.css';\r\nimport {SidebarData} from './SidebarData';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass Sidebar extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n \r\n\r\n\r\n    render(){\r\n        var self = this\r\n        return(\r\n            <>\r\n            <div className='navbar'>\r\n                <Link to='#' className='menu-bars'>\r\n                    <FaIcons.FaBars className={this.props.toggle ? 'logo active' : 'logo'} onClick={()=> this.props.onClick(this.props.toggle)}/>\r\n                </Link>\r\n            </div>\r\n               <nav className={self.props.toggle ? 'nav-menu active' : 'nav-menu'}> \r\n                <ul className='nav-menu-items' onClick={()=> this.props.onClick(this.props.toggle)}>\r\n                    {SidebarData.map((val, index) =>{\r\n                        return(   \r\n                        <li key={index} className='sidebaritem' id={window.location.pathname === val.link ? \"active\" : \"\"} onClick={() => {window.location.pathname = val.link}}>\r\n                            <div id='icon'>\r\n                                {val.icon}\r\n                            </div>\r\n\r\n                            <div id='title'>\r\n                                {val.title}\r\n                            </div>\r\n\r\n                        </li>\r\n                        );\r\n                    })}\r\n                    </ul>\r\n               </nav>\r\n        </>\r\n            \r\n            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js",[],["49","50"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\pages\\Item.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Buying.js",["51"],"import React from 'react'\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Table } from 'semantic-ui-react'\r\nimport { TextField } from '@material-ui/core';\r\nimport { Button } from 'semantic-ui-react'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Search } from 'semantic-ui-react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport _ from 'lodash'\r\n\r\n\r\n\r\nclass Buying extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            buyingForm:{\r\n                posting_datetime: new Date(),\r\n                status:'Draft',\r\n                supplier:'',\r\n                items:[],\r\n            },\r\n            value:'',\r\n            itemDropDown:[],\r\n            isLoading:false,\r\n            results:[],\r\n        }\r\n        \r\n        this.fetchItem = this.fetchItem.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleSearchChange = this.handleSearchChange.bind(this)\r\n\r\n\r\n    }\r\n\r\n        getCookie(name) {\r\n            let cookieValue = null;\r\n            if (document.cookie && document.cookie !== '') {\r\n                const cookies = document.cookie.split(';');\r\n                for (let i = 0; i < cookies.length; i++) {\r\n                    const cookie = cookies[i].trim();\r\n                    // Does this cookie string begin with the name we want?\r\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return cookieValue;\r\n        }\r\n        \r\n        componentWillMount(){\r\n            this.fetchItem()\r\n        }\r\n\r\n        componentDidMount(){\r\n            this.formatDate(this.state.buyingForm.posting_datetime)\r\n        }\r\n\r\n        formatDate = (date) =>{\r\n            var year = date.getFullYear();\r\n            var month = (1 + date.getMonth()).toString();\r\n            month = month.length > 1 ? month : '0' + month;\r\n        \r\n    \r\n            var day = date.getDate().toString();\r\n            day = day.length > 1 ? day : '0' + day;\r\n            var hour = (date.getHours()).toString();\r\n            hour = hour.length > 1? hour :  '0' + hour;\r\n            var minute = date.getMinutes().toString()\r\n            minute = minute.length > 1 ?  minute: '0' + minute;\r\n            var second = date.getSeconds().toString();\r\n            second = second.length > 1 ?  second: '0' + second;\r\n            this.setState({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    posting_datetime:year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':' + second\r\n                }\r\n                \r\n            })\r\n        }\r\n\r\n        handleDateChange = (event) =>{\r\n    \r\n            this.setState({\r\n                buyingForm:{...this.state.buyingForm,\r\n                    posting_datetime: event.target.value\r\n            }\r\n                \r\n            })\r\n        }\r\n\r\n        fetchItem(){\r\n            var url = 'http://127.0.0.1:8000/api/item-list/'\r\n\r\n            fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({\r\n                itemDropDown:data\r\n            }))\r\n        }\r\n\r\n        handleSubmit = (e) =>{\r\n            e.preventDefault()\r\n            var csrftoken = this.getCookie('csrftoken')\r\n            var url = 'http://127.0.0.1:8000/api/purchaseorder-create/'\r\n            console.log(this.state.buyingForm);\r\n            fetch(url,{\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    'X-CSRFToken': csrftoken,\r\n\r\n                },\r\n                'body' :JSON.stringify(this.state.buyingForm)\r\n            }).then((response) => {\r\n                // enter reponse here\r\n                \r\n            })\r\n        }\r\n    \r\n    \r\n        handleDateChange(date){\r\n            this.setState({\r\n                posting_datetime:date\r\n            })\r\n        }\r\n\r\n        handleSearchChange = (e, {value}) => {\r\n\r\n        const itemList = this.state.itemDropDown.map((row, index)=>({\r\n            key: index,\r\n            title: row.name,\r\n            description: row.srp,\r\n            price: row.cost,\r\n            srp:row.srp,\r\n            \r\n        }));    \r\n            this.setState({\r\n                isLoading: true, value\r\n            })\r\n            setTimeout(() => {\r\n            if(this.state.value.length < 1)return this.setState({\r\n                isLoading:false,\r\n                results:[],\r\n                value:'',\r\n                })\r\n\r\n                const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\r\n                const isMatch = (result) => re.test(result.title)\r\n                this.setState({\r\n                  isLoading: false,\r\n                  results: _.filter(itemList, isMatch),\r\n                })\r\n            }, 300);\r\n        }\r\n        \r\n\r\n        handleResultSelect = (e, {result}) =>{\r\n            // check if item is already in list\r\n            const itemIndex = this.state.buyingForm.items.findIndex(\r\n                (item) => item.key === result.key\r\n                \r\n              );\r\n            if(itemIndex !== -1){\r\n                this.setState(prevState => ({\r\n                    value:'',\r\n                    buyingForm:{\r\n                        ...this.state.buyingForm,\r\n                        items:prevState.buyingForm.items.map(\r\n                        \r\n                            el => el.key === result.key? { ...el, qty:el.qty +1, total:(el.qty+ 1) * parseFloat(el.cost).toFixed(2) }: el\r\n                        ),\r\n                    },    \r\n                }))\r\n            }\r\n            else{\r\n            const obj = {'key':result.key, 'name': result.title, 'cost':parseFloat(result.price).toFixed(2), 'qty':1, 'total':parseFloat(result.price).toFixed(2) * 1}\r\n\r\n            this.setState(() =>({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    items:[\r\n                        ...this.state.buyingForm.items,\r\n                        obj,\r\n                    ],\r\n                },\r\n                value:'',\r\n\r\n                \r\n            }))\r\n        }\r\n        }\r\n\r\n        qtyHandle = (event, row, index) => {\r\n            this.setState(prevState => ({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    items:prevState.buyingForm.items.map(\r\n                            el => el.key === row.key? { ...el, qty: event.target.value, total: event.target.value * parseFloat(el.cost).toFixed(2)}: el\r\n                        ),\r\n                }\r\n               \r\n            }))\r\n        }\r\n\r\n\r\n        deleteItem = (row,index) =>{\r\n            var list = [...this.state.buyingForm.items]\r\n            list.splice(index, 1);\r\n            this.setState(prevState =>({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    items:list,\r\n                }\r\n            }))\r\n        }\r\n\r\n        handleSupplier = (e) =>{\r\n            this.setState({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    supplier:e.target.value\r\n                }\r\n                \r\n            })\r\n        }\r\n        \r\n\r\n        \r\n\r\n        \r\n    render(){\r\n        const { classes } = this.props;\r\n        const qty_total = this.state.buyingForm.items.reduce((qty_total, list) => qty_total + parseInt(list.qty),0)\r\n        const list_total = this.state.buyingForm.items.reduce((list_total,list) => list_total + list.total, 0)\r\n        list_total.toFixed(2)\r\n\r\n        return(\r\n     \r\n            <>\r\n            \r\n           \r\n\r\n            <div style={{float: 'right', margin:5}}>\r\n            <Button type='button' onClick={(e) => this.handleSubmit(e)} primary> Submit</Button>\r\n            <Button type='button' secondary> Delete</Button>  \r\n            </div>\r\n\r\n            <form className='buying-form'>\r\n          \r\n            <div className='buying-input'>\r\n \r\n            \r\n\r\n            <Search\r\n            className='searchbar'\r\n            size='big'\r\n            input={{ icon: 'search', iconPosition: 'left' }}\r\n            loading={this.state.isLoading}\r\n            onResultSelect={this.handleResultSelect}\r\n            onSearchChange={_.debounce(this.handleSearchChange, 500, {\r\n              leading: true,\r\n            })}\r\n            results={this.state.results}\r\n            value={this.state.value}\r\n          />\r\n\r\n            <div className='table-container'>\r\n\r\n                <Table size='large' celled fixed selectable compact color={'yellow'}>\r\n                    <Table.Header style={{  position:'sticky'}}>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell width={4}>Item Name</Table.HeaderCell>\r\n                        <Table.HeaderCell width={1}>Qty</Table.HeaderCell>\r\n                        <Table.HeaderCell width={2}>Rate</Table.HeaderCell>\r\n                        <Table.HeaderCell width={2}>Total</Table.HeaderCell>\r\n                        <Table.HeaderCell width={1}></Table.HeaderCell>\r\n                    </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        \r\n                        {this.state.buyingForm.items.map((row, index) =>(\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell>{row.name}</Table.Cell>\r\n                                <Table.Cell> <TextField  type='number' value={row.qty} fullWidth variant='standard' size='small' onChange={(e) => {this.qtyHandle(e, row,index)}} /></Table.Cell>\r\n                                <Table.Cell>{row.cost}</Table.Cell>\r\n                                <Table.Cell>{row.total}</Table.Cell>\r\n                                <Table.Cell><DeleteIcon onClick={() => {this.deleteItem(row,index)}}/></Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                    </Table.Body>\r\n                </Table>\r\n                \r\n\r\n            </div>\r\n            <Button type='button' style={{marginTop: 5}} onClick={this.getList}>Get all Items</Button>\r\n            </div>\r\n            \r\n            <div className='table-info' style={{backgroundColor:'#D6D6D6'}}>\r\n            <div className='table-info-grid'>\r\n            <h1 style={{fontSize:30,textAlign:'left',borderRadius:10, color:'#333533',backgroundColor:'#ffd100'}}>Information</h1>\r\n            <Grid container spacing={3}>\r\n                <Grid item>\r\n                    <TextField label=\"DATE\" variant='outlined' className='date' type='datetime-local' onChange={this.handleDateChange} value={this.state.buyingForm.posting_datetime}></TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                    <TextField label='SUPPLIER' variant='outlined' onChange={this.handleSupplier} value={this.state.buyingForm.supplier} inputProps={{ style: { fontSize:15,color: 'black', borderColor:'white', borderSpacing:5}}}></TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                    <TextField label='STATUS' variant='outlined' value={this.state.buyingForm.status} inputProps={{ style: { fontSize:15,color: 'black', borderColor:'white', borderSpacing:5}}}></TextField>\r\n                </Grid>\r\n            </Grid>\r\n            </div>\r\n            <div className='table-info-grid'>\r\n            <h1 style={{fontSize:30,textAlign:'left',borderRadius:10, color:'#333533',backgroundColor:'#ffd100'}}>Summary</h1>\r\n            <Grid container spacing={3}>\r\n                <Grid item>\r\n                    <TextField label='GRAND TOTAL'  variant='outlined' value={list_total}  inputProps={{ style: { fontSize:15,color: 'black', borderColor:'white', borderSpacing:5}}}></TextField>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <TextField label='TOTAL QUANTITY' variant='outlined' value={qty_total}  inputProps={{ style: { fontSize:15,color: 'black', borderColor:'white'}}}></TextField>\r\n                </Grid>\r\n            </Grid>\r\n            </div>\r\n            </div>\r\n\r\n            </form>\r\n\r\n            \r\n            \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buying",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":10,"column":5,"nodeType":"58","messageId":"59","endLine":12,"endColumn":6},{"ruleId":"52","replacedBy":"60"},{"ruleId":"54","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":235,"column":17,"nodeType":"64","messageId":"65","endLine":235,"endColumn":24},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["66"],["67"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]