[{"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js":"1","C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js":"3","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js":"4","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js":"5","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js":"6","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Buying.js":"7","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Header.js":"8","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\POS.js":"9","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js":"10","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\ItemForm.js":"11","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Receive.js":"12"},{"size":543,"mtime":1616857251008,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":972,"mtime":1617175544245,"results":"16","hashOfConfig":"14"},{"size":961,"mtime":1616744243597,"results":"17","hashOfConfig":"14"},{"size":172,"mtime":1608131566916,"results":"18","hashOfConfig":"14"},{"size":201,"mtime":1608174481299,"results":"19","hashOfConfig":"14"},{"size":14890,"mtime":1617176872073,"results":"20","hashOfConfig":"14"},{"size":3953,"mtime":1617164183499,"results":"21","hashOfConfig":"14"},{"size":11452,"mtime":1616234097145,"results":"22","hashOfConfig":"14"},{"size":15804,"mtime":1616919694479,"results":"23","hashOfConfig":"14"},{"size":1107,"mtime":1616340455907,"results":"24","hashOfConfig":"14"},{"size":5996,"mtime":1617178299368,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"jwp6b1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js",[],["53","54"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js",["55"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Buying.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Header.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\POS.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js",["56"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FormControl from '@material-ui/core/FormControl'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        flexGrow:1,\r\n    },\r\n    form:{\r\n        marginTop: 15,\r\n        marginRight:10,\r\n        backgroundColor:'#D6D6D6',\r\n        padding:10,\r\n        minHeight:700,\r\n    },\r\n\r\n    paper:{\r\n        margin:14,\r\n        backgroundColor:'#D6D6D6',\r\n        minHeight:700,\r\n        textAlign: 'left',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    table:{\r\n        maxHeight:700,\r\n    },\r\n    tableRow: {\r\n        \"&.Mui-selected, &.Mui-selected:hover\": {\r\n          backgroundColor: \"#e9c46a\",\r\n        }\r\n      },\r\n\r\n\r\n}));\r\n\r\n\r\n\r\nexport default function Item() {\r\n    var timer\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState(false)\r\n    const [itemList, setItemList] = useState([])\r\n    const [itemObj, setItem] = useState({name:'', barcode_number:'', cost:'', srp:'', enable:true, packing:1})\r\n    const [itemFormStatus, setItemForm] = useState('Create')\r\n    const [columnToQuery, setColumnToQuery] = useState('name')\r\n    const [search, setSearch] = useState('')\r\n    const [markup, setMarkup] = useState(0)\r\n    const [margin, setMargin] = useState(0)\r\n    const [selectedRow, setSelectedRow] = useState(0)\r\n\r\n    function getCookie(name) {\r\n        let cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            const cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                const cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        // fetchItems\r\n        var url = 'http://127.0.0.1:8000/api/item-list/'\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => setItemList(response))\r\n        },[itemObj])\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setMessage(false);\r\n      };\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        var csrftoken = getCookie('csrftoken')\r\n        var url = 'http://127.0.0.1:8000/api/item-create/'\r\n\r\n        fetch(url, {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                'X-CSRFToken':csrftoken,\r\n            },\r\n            'body': JSON.stringify(itemObj)\r\n        }).then((response) => {\r\n            handleClearForm()\r\n            \r\n        })\r\n    }\r\n\r\n    const itemCreate = (e) =>{\r\n        setItem({...itemObj, [e.target.id]:e.target.value})\r\n    }\r\n\r\n    const handleEdit = (e) =>{\r\n        e.preventDefault()\r\n        var csrftoken = getCookie('csrftoken')\r\n        var url = `http://127.0.0.1:8000/api/item-update/${itemObj.id}/`\r\n        fetch(url, {\r\n            method: 'PUT',\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                'X-CSRFToken':csrftoken,\r\n            },\r\n            'body': JSON.stringify(itemObj)\r\n        })\r\n        .then((response) => {\r\n            setMessage(true)\r\n            handleClearForm()\r\n        })\r\n    }\r\n\r\n    const handleClearForm = (e) =>{\r\n        setItemForm('Create')\r\n        setSelectedRow('')\r\n        setMarkup(0)\r\n        setMargin(0)\r\n        setItem({...itemObj, id:null, name:'', barcode_number:'', cost:'', srp:'', enable:true, packing:1})\r\n    }\r\n\r\n    \r\n    const viewItemHandler = (e, item) => {\r\n        clearTimeout(timer)\r\n        if(e.detail === 1){\r\n            timer = setTimeout(() => {\r\n            setSelectedRow(item.id)\r\n            setMargin((((item.srp - (item.cost/item.packing))/ item.srp)* 100).toFixed(2)+' %')\r\n            setMarkup((((item.srp - (item.cost/item.packing))/item.cost) * 100).toFixed(2) +' %')\r\n            setItem({...itemObj, id:item.id, name:item.name, barcode_number:item.barcode_number, cost:item.cost, srp:item.srp, enable:item.enable, packing:item.packing})\r\n            setItemForm('View')\r\n            }, 200)\r\n        }\r\n        else{\r\n            setSelectedRow(item.id)\r\n            setMargin((((item.srp - (item.cost/item.packing))/ item.srp)* 100).toFixed(2)+' %')\r\n            setMarkup((((item.srp - (item.cost/item.packing))/item.cost) * 100).toFixed(2) +' %')\r\n            setItem({...itemObj, id:item.id, name:item.name, barcode_number:item.barcode_number, cost:item.cost, srp:item.srp, enable:item.enable, packing:item.packing})\r\n            setItemForm('Edit')\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    const handleSelect = (e) =>{\r\n        setSearch('')\r\n        setColumnToQuery(e.target.value)\r\n    }\r\n\r\n    const handleCheckChange = () =>{\r\n        setItem({...itemObj, enable:!itemObj.enable})\r\n    }\r\n\r\n\r\n    const formatModifiedDate = (date_modified) =>{\r\n        var current_date = new Date()\r\n        var modified = new Date(date_modified)\r\n        var diff = current_date - modified\r\n        if(diff < 60000){\r\n            return ('Now')\r\n        }else if(diff > 60000 && diff < 3600000){\r\n            var mins_ago = diff/60000\r\n            return (Math.floor(mins_ago) + ' m')\r\n        }else if(diff > 3600000 && diff < 86400000){\r\n            var hours_ago = diff/3600000\r\n            return (Math.floor(hours_ago) + 'h')\r\n        }else if(diff > 86400000 && diff < 2.6280E+9){\r\n            var days_ago = diff/86400000\r\n            return(Math.floor(days_ago) + ' d')\r\n        }else if(diff > 2.6280E+9 && diff < 3.1536E+10){\r\n            var months_ago = diff/2.6280E+9\r\n            return(Math.floor(months_ago) + ' M')\r\n        }else if(diff >= 3.1536E+10){\r\n            var years_ago = diff/3.1536E+10\r\n            return(Math.floor(years_ago) + ' Y')\r\n        }\r\n\r\n    }\r\n    \r\n        return(\r\n            <div className={classes.root}>\r\n            \r\n            <Grid container spacing={1}>\r\n                <Grid item xs={7}> \r\n                <Paper className={classes.paper}>\r\n                <Grid container style={{padding:5}} spacing={2}>\r\n                    <Grid item xs={6}>\r\n                        <TextField type=\"search\" onChange={(e) => setSearch(e.target.value)} value={search} label='SEARCH' size='small' fullWidth variant='outlined' InputProps={{startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                        </InputAdornment>)}}/>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormControl fullWidth variant='outlined' size='small'>\r\n                        <Select onChange={(e) => handleSelect(e)} fullWidth variant='outlined'>\r\n                            <MenuItem value='name'>Name</MenuItem>\r\n                            <MenuItem value='barcode_number'>Barcode</MenuItem>\r\n                            <MenuItem value='cost'>Buying</MenuItem>\r\n                            <MenuItem value='srp'>Selling</MenuItem>\r\n                        </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <TableContainer className={classes.table}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Item Name</TableCell>\r\n                                <TableCell>Barcode</TableCell>\r\n                                <TableCell>Buying</TableCell>\r\n                                <TableCell>Selling</TableCell>\r\n                                <TableCell width='10'>Modified</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {itemList.filter((val) => {\r\n                        if(search === ''){\r\n                            return val\r\n                        }else if(val[columnToQuery].toLowerCase().includes(search.toLowerCase())){\r\n                            return val}\r\n                    }).map((item,key) =>(\r\n                        <TableRow className={classes.tableRow} selected={selectedRow === item.id} onClick={(e) => viewItemHandler(e, item)} key={item.id} hover>\r\n                           <TableCell>{item.name}</TableCell>\r\n                           <TableCell>{item.barcode_number}</TableCell>\r\n                           <TableCell>{item.cost}</TableCell>\r\n                           <TableCell>{item.srp}</TableCell>\r\n                           <TableCell>{formatModifiedDate(item.modified)} </TableCell>\r\n                           \r\n                        </TableRow>\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n                </Paper>\r\n                </Grid>\r\n                \r\n                <Grid item xs={5}>\r\n                    <Paper className={classes.form}>\r\n                        <Grid container item spacing={2}>\r\n                        <Grid item xs={12}>\r\n                        <Typography variant=\"h1\" style={{fontSize:30,textAlign:'left',borderRadius:5, color:'#333533',backgroundColor:'#ffd100'}} noWrap>Item {itemFormStatus} </Typography>\r\n                        \r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                        <TextField id='name' onChange={(e) => {itemCreate(e)}} fullWidth variant='outlined' value={itemObj.name} label='Name'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                        <TextField id='barcode_number' onChange={(e) => {itemCreate(e)}} fullWidth variant='outlined' value={itemObj.barcode_number} label='Barcode'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <TextField id='packing' onChange={(e) => {itemCreate(e)}} type='number' fullWidth variant='outlined' value={itemObj.packing} label='Packing'></TextField>\r\n                        </Grid>\r\n                        <Grid container item spacing={1}>\r\n                        <Grid item xs={4}>\r\n                        <TextField fullWidth id='cost' size='small' onChange={(e) => {itemCreate(e)}} type='number' value={itemObj.cost} variant='outlined' label='Buying'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <TextField fullWidth id='srp' size='small' onChange={(e) => {itemCreate(e)}} type='number' value={itemObj.srp} variant='outlined' label='Selling'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <FormControlLabel control={<Checkbox color={'primary'} onChange={() => handleCheckChange()} checked={itemObj.enable}/>} label='Enable'/>\r\n                        </Grid>\r\n                        {itemFormStatus === 'Create' ? (\r\n                        <Grid container item style={{paddingTop:20}} spacing={1}>\r\n                            <Grid item xs={6}>\r\n                            <TextField disabled read_only size='small' fullWidth value={margin} variant='outlined' label='Margin'></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <TextField disabled read_only size='small' fullWidth value={markup} variant='outlined' label='Markup'></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n                        ):\r\n                        <Grid container item style={{paddingTop:20}} spacing={1}>\r\n                            <Grid item xs={6}>\r\n                            <TextField read_only size='small' fullWidth value={margin} variant='outlined' label='Margin'></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <TextField read_only size='small' fullWidth value={markup} variant='outlined' label='Markup'></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n                        }\r\n                        \r\n                        <Grid container item spacing={1}>\r\n                        <Grid item xs={6}>\r\n                            {itemFormStatus === 'Create' && (itemObj.name !== '' && itemObj.barcode_number !== '' && itemObj.cost !== '' && itemObj.srp !== '') ? (\r\n                            <Button fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Submit</Button>\r\n                            ):itemFormStatus === 'Edit' && (itemObj.name === '' || itemObj.barcode_number === '' || itemObj.cost === '' || itemObj.srp === '') ? (\r\n                            <Button disabled fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Save</Button>\r\n                            ):itemFormStatus === 'Edit' && (itemObj.name !== '' || itemObj.barcode_number !== '' || itemObj.cost !== '' || itemObj.srp !== '') ? (\r\n                            <Button fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleEdit(e, itemObj)}>Save</Button>\r\n                            ):<Button disabled fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Submit</Button>\r\n\r\n                            }\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {itemObj.name !== '' || itemObj.barcode_number !== '' || itemObj.cost !== '' || itemObj.srp !== ''? (\r\n                            <Button fullWidth size='large' variant='contained' color='secondary' onClick={(e) => handleClearForm(e)}>Clear</Button>\r\n                            ):<Button disabled fullWidth size='large' variant='contained' color='secondary' onClick={(e) => handleClearForm(e)}>Clear</Button>\r\n                        }\r\n                        </Grid>\r\n                        </Grid>\r\n                        </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n                \r\n            </Grid>   \r\n            <Snackbar anchorOrigin={{vertical: 'bottom', horizontal:'right'}} autoHideDuration={6000} open={message} onClose={handleClose}>\r\n            <Alert variant='filled' elevation={6} onClose={handleClose} severity=\"success\">\r\n                Saved\r\n            </Alert>\r\n            </Snackbar>\r\n            </div>\r\n        );\r\n    }\r\n","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\ItemForm.js",[],["57","58"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Receive.js",["59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":13,"column":3,"nodeType":"66","messageId":"67","endLine":15,"endColumn":4},{"ruleId":"68","severity":1,"message":"69","line":245,"column":44,"nodeType":"70","messageId":"71","endLine":245,"endColumn":46},{"ruleId":"60","replacedBy":"72"},{"ruleId":"62","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":45,"column":7,"nodeType":"76","endLine":45,"endColumn":9,"suggestions":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["78"],["79"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formatDate' and 'purchaseReceiptForm.posting_datetime'. Either include them or remove the dependency array.","ArrayExpression",["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [formatDate, purchaseReceiptForm.posting_datetime]",{"range":"83","text":"84"},[1430,1432],"[formatDate, purchaseReceiptForm.posting_datetime]"]