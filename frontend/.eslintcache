[{"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js":"1","C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js":"3","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js":"4","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js":"5","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js":"6","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Buying.js":"7","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Header.js":"8","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\POS.js":"9","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js":"10","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Receive.js":"11","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\BuyingList.js":"12","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\BuyingDetail.js":"13"},{"size":543,"mtime":1616857251008,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1261,"mtime":1618205629848,"results":"17","hashOfConfig":"15"},{"size":965,"mtime":1617898073788,"results":"18","hashOfConfig":"15"},{"size":172,"mtime":1608131566916,"results":"19","hashOfConfig":"15"},{"size":201,"mtime":1608174481299,"results":"20","hashOfConfig":"15"},{"size":17501,"mtime":1618207137378,"results":"21","hashOfConfig":"15"},{"size":3953,"mtime":1617761406499,"results":"22","hashOfConfig":"15"},{"size":11452,"mtime":1616234097145,"results":"23","hashOfConfig":"15"},{"size":16371,"mtime":1618047387120,"results":"24","hashOfConfig":"15"},{"size":11815,"mtime":1618276601974,"results":"25","hashOfConfig":"15"},{"size":6055,"mtime":1618277817963,"results":"26","hashOfConfig":"15"},{"size":7332,"mtime":1618213388954,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"jwp6b1",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js",[],["59","60"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js",["61"],"import './App.css';\r\nimport Header from './Components/Header'\r\nimport Item from './Pages/Item'\r\nimport About from './Pages/About'\r\nimport Home from './Pages/Home'\r\nimport Buying from './Pages/Buying'\r\nimport Receive from './Pages/Receive'\r\nimport POS from './Pages/POS'\r\nimport BuyingList from './Pages/BuyingList'\r\nimport React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\r\nimport BuyingDetail from './Pages/BuyingDetail';\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n  }\r\n\r\n  render(){\r\n    return(\r\n        <div className='App'>\r\n      <Router>\r\n      <Header/>\r\n        <Switch>\r\n          <Route path='/'  exact component={Home}/>\r\n          <Route path='/buying' exact component={Buying}/>\r\n          <Route path='/buyingList' exact component={BuyingList}/>\r\n          <Route path='/buying/:purchase_order_number' exact component={BuyingDetail}/>\r\n          <Route path='/item' exact component={Item}/>\r\n          <Route path='/receive' exact component={Receive}/>\r\n          <Route path='/pos' exact component={POS}/>\r\n          <Route path='/about' exact component={About}/>\r\n        </Switch>\r\n      </Router>\r\n        \r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Buying.js",["62","63","64","65","66"],"import React from 'react'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Button  from '@material-ui/core/Button'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport PropTypes from 'prop-types';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Typography } from '@material-ui/core';\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        \r\n      },\r\n\r\n    searchForm:{\r\n        backgroundColor:'#D6D6D6',\r\n        minHeight:125,\r\n        marginTop:20,\r\n        margin:15,\r\n    },\r\n\r\n    search:{\r\n        margin:15,\r\n    },\r\n    paper: {\r\n        padding:5,\r\n        margin:15,\r\n        textAlign: 'center',\r\n        backgroundColor:'#D6D6D6'\r\n      },\r\n    form:{\r\n        minHeight:650,\r\n        margin:15,\r\n        marginLeft:15,\r\n        backgroundColor:'#D6D6D6',\r\n        padding:5\r\n    },\r\n    table:{\r\n        minHeight:600\r\n    },\r\n  });\r\n\r\nclass Buying extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            buyingForm:{\r\n                posting_datetime: new Date(),\r\n                status:'',\r\n                supplier:'',\r\n                items:[],\r\n            },\r\n\r\n            search:'',\r\n            itemList:[],\r\n            columnToQuery:'name',\r\n\r\n\r\n\r\n        }\r\n        \r\n        this.fetchItem = this.fetchItem.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.getItemsUnderSupplier = this.getItemsUnderSupplier.bind(this)\r\n        this.rerouteToPurchasOrder = this.rerouteToPurchasOrder.bind(this)\r\n\r\n    }\r\n\r\n        getCookie(name) {\r\n            let cookieValue = null;\r\n            if (document.cookie && document.cookie !== '') {\r\n                const cookies = document.cookie.split(';');\r\n                for (let i = 0; i < cookies.length; i++) {\r\n                    const cookie = cookies[i].trim();\r\n                    // Does this cookie string begin with the name we want?\r\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return cookieValue;\r\n        }\r\n        \r\n        componentWillMount(){\r\n            this.fetchItem()\r\n        }\r\n\r\n        componentDidMount(){\r\n            this.formatDate(this.state.buyingForm.posting_datetime)\r\n        }\r\n\r\n        initializeForm(){\r\n            this.setState({\r\n                ...this.state.buyingForm,\r\n                buyingForm:{\r\n                    posting_datetime: new Date(),\r\n                    status:'Draft',\r\n                    supplier:'',\r\n                    items:[],\r\n                },\r\n                \r\n\r\n            })\r\n        }\r\n\r\n        formatDate = (date) =>{\r\n            var year = date.getFullYear();\r\n            var month = (1 + date.getMonth()).toString();\r\n            month = month.length > 1 ? month : '0' + month;\r\n            var day = date.getDate().toString();\r\n            day = day.length > 1 ? day : '0' + day;\r\n            var hour = (date.getHours()).toString();\r\n            hour = hour.length > 1? hour :  '0' + hour;\r\n            var minute = date.getMinutes().toString()\r\n            minute = minute.length > 1 ?  minute: '0' + minute;\r\n            var second = date.getSeconds().toString();\r\n            second = second.length > 1 ?  second: '0' + second;\r\n            this.setState({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    posting_datetime:year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':' + second\r\n                }\r\n                \r\n            })\r\n        }\r\n\r\n        handleDateChange = (event) =>{\r\n    \r\n            this.setState({\r\n                buyingForm:{...this.state.buyingForm,\r\n                    posting_datetime: event.target.value\r\n            }\r\n                \r\n            })\r\n        }\r\n\r\n        fetchItem(){\r\n            var url = 'http://127.0.0.1:8000/api/item-list-active/'\r\n\r\n            fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({\r\n                itemList:data\r\n            }))\r\n        }\r\n\r\n        handleSubmit = (e) =>{\r\n            e.preventDefault()\r\n            var csrftoken = this.getCookie('csrftoken')\r\n            var url = 'http://127.0.0.1:8000/api/purchaseorder-create/'\r\n            console.log(this.state.buyingForm);\r\n            fetch(url,{\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    'X-CSRFToken': csrftoken,\r\n\r\n                },\r\n                'body' :JSON.stringify(this.state.buyingForm)\r\n            }).then((response) => { response.json()\r\n                .then(response => this.rerouteToPurchasOrder(response['purchase_order_number']))\r\n            })\r\n        }\r\n    \r\n    \r\n        handleDateChange(date){\r\n            this.setState({\r\n                posting_datetime:date\r\n            })\r\n        }\r\n\r\n        qtyHandle = (event, row) => {\r\n            this.setState(prevState => ({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    items:prevState.buyingForm.items.map(\r\n                            el => el.key === row.key? { ...el, qty: parseInt(event.target.value)}: el\r\n                        ),\r\n                }\r\n               \r\n            }))\r\n        }\r\n\r\n\r\n        deleteItem = (row,index) =>{\r\n            var list = [...this.state.buyingForm.items]\r\n            list.splice(index, 1);\r\n            this.setState(prevState =>({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    items:list,\r\n                }\r\n            }))\r\n        }\r\n\r\n        handleSupplier = (e) =>{\r\n            this.setState({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    supplier:e.target.value\r\n                }\r\n                \r\n            })\r\n        }\r\n\r\n        handleSelect = (e) => {\r\n            this.setState({\r\n                columnToQuery:e.target.value\r\n            })\r\n        }\r\n\r\n        selectItemHandler = (e, item) => {\r\n            console.log(this.state.buyingForm.items, item, 'testing')\r\n            const itemIndex = this.state.buyingForm.items.findIndex(\r\n                (list) => list.key === item.id                \r\n              );\r\n\r\n        if(itemIndex !== -1){\r\n        this.setState(prevState => ({\r\n            buyingForm:{\r\n                ...this.state.buyingForm,\r\n                items:prevState.buyingForm.items.map(\r\n                \r\n                    el => el.key === item.id? { ...el, qty:parseInt(el.qty) +1}: el\r\n                ),\r\n            },    \r\n            }))\r\n        }\r\n        else{\r\n            const obj = {key: item.id, name:item.name, barcode:item.barcode_number, qty:1, cost:item.cost}\r\n            this.setState(() => ({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    items:[\r\n                        ...this.state.buyingForm.items,\r\n                        obj,\r\n                    ],\r\n                }\r\n            }))\r\n        }\r\n\r\n        \r\n            \r\n        }\r\n\r\n        rerouteToPurchasOrder = (purchaseOrder) => {\r\n                this.props.history.push(`/buying/${purchaseOrder}`)\r\n        }\r\n     \r\n\r\n        getItemsUnderSupplier = () => {\r\n            console.log(this.state.buyingForm.supplier)\r\n            var url = `http://127.0.0.1:8000/api/item-list-supplier/${this.state.buyingForm.supplier}/`\r\n            fetch(url)\r\n            .then(response => response.json())\r\n            .then(response =>  {\r\n                let list = []\r\n                response.map((item, key) => {\r\n                    const obj = {'key':item.id, 'name': item.name, 'barcode':item.barcode_number, 'cost':parseFloat(item.cost).toFixed(2), 'qty':1}\r\n                    list.push(obj)\r\n                    return list\r\n                })\r\n                console.log(list, 'testing new lsit')\r\n                this.setState(prevState =>({\r\n                buyingForm:{\r\n                    ...this.state.buyingForm,\r\n                    items:list,\r\n                }\r\n            }))}\r\n            )\r\n            \r\n            \r\n            \r\n        }\r\n        \r\n        \r\n\r\n        \r\n\r\n        \r\n    render(){\r\n        const { classes } = this.props;\r\n        const qty_total = this.state.buyingForm.items.reduce((qty_total, current) => qty_total + parseInt(current.qty),0)\r\n        const list_total = this.state.buyingForm.items.reduce((list_total,current) => list_total + (current.cost*current.qty), 0)\r\n        console.log(this.state.buyingForm)\r\n\r\n        return(\r\n     \r\n            <>\r\n\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    <Paper className={classes.searchForm}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6}>\r\n                                <TextField style={{margin:10}} label=\"Date\" variant='outlined' size='small' className='date' type='datetime-local' onChange={this.handleDateChange} value={this.state.buyingForm.posting_datetime}></TextField>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={4}>\r\n                                <TextField style={{margin:10}}  label='Supplier' variant='outlined' size='small' onChange={this.handleSupplier} value={this.state.buyingForm.supplier} inputProps={{ style: { fontSize:15,color: 'black', borderColor:'white', borderSpacing:5}}}></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                                {this.state.buyingForm.supplier === '' ? (\r\n                                <Button color='primary' disabled variant='contained' onClick={(e) => this.getItemsUnderSupplier()} style={{margin:10}}>Get Items Under Supplier</Button>\r\n                                ):(\r\n                                <Button color='primary' variant='contained' onClick={(e) => this.getItemsUnderSupplier()} style={{margin:10}}>Get Items Under Supplier</Button>\r\n                                )}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    <Paper className={classes.searchForm}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6}>\r\n                                <TextField label='Total Amount' style={{margin:10}} size='small' disabled variant='outlined' value={list_total.toFixed(2)}  inputProps={{ style: { fontSize:15,color: 'black', borderColor:'white', borderSpacing:5}}}></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField label='Total Qty' style={{margin:10}} size='small' disabled variant='outlined' value={qty_total}  inputProps={{ style: { fontSize:15,color: 'black', borderColor:'white'}}}></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={4}>\r\n                            {this.state.buyingForm.items.length > 0 ? (\r\n                            <Button fullWidth style={{margin:10}} variant=\"contained\" type='button' color='yellow' onClick={(e) => this.handleSubmit(e)} color='primary'> Save</Button>)\r\n                            :<Button fullWidth style={{margin:10}} variant=\"contained\" basic disabled color='yellow' type='button' onClick={(e) => this.handleSubmit(e)} primary> Save</Button>}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={2}>\r\n            <Grid item xs={6}> \r\n                <Paper className={classes.paper}>\r\n                <Grid container style={{padding:5}} spacing={2}>\r\n                    <Grid item xs={6}>\r\n                        <TextField type=\"search\" onChange={(e) => this.setState({search:e.target.value})} value={this.state.search} label='SEARCH' size='small' fullWidth variant='outlined' InputProps={{startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                        </InputAdornment>)}}/>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormControl fullWidth variant='outlined' size='small'>\r\n                        <Select onChange={(e) => this.handleSelect(e)} fullWidth variant='outlined'>\r\n                            <MenuItem value='name'>Name</MenuItem>\r\n                            <MenuItem value='barcode_number'>Barcode</MenuItem>\r\n                            <MenuItem value='cost'>Buying</MenuItem>\r\n                            <MenuItem value='srp'>Selling</MenuItem>\r\n                        </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <TableContainer className={classes.table}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Item Name</TableCell>\r\n                                <TableCell>Barcode</TableCell>\r\n                                <TableCell>Buying</TableCell>\r\n                                <TableCell>Selling</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {this.state.itemList.filter((val) => {\r\n                        if(this.state.search === ''){\r\n                            return val\r\n                        }else if(val[this.state.columnToQuery].toLowerCase().includes(this.state.search.toLowerCase())){\r\n                            return val}\r\n                    }).map((item,key) =>(\r\n                        <TableRow className={classes.tableRow} onClick={(e) => this.selectItemHandler(e, item)} key={item.id} hover>\r\n                           <TableCell>{item.name}</TableCell>\r\n                           <TableCell>{item.barcode_number}</TableCell>\r\n                           <TableCell>{item.cost}</TableCell>\r\n                           <TableCell>{item.srp}</TableCell>\r\n                           \r\n                        </TableRow>\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n                </Paper>\r\n                </Grid>\r\n\r\n\r\n            <Grid item xs={6}>\r\n            <Paper className={classes.form}>\r\n\r\n                <TableContainer style={{maxHeight:70}} className={classes.table}>\r\n                    <Table stickyHeader size='small'>\r\n                    <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Item Name</TableCell>\r\n                        <TableCell width='15%'>Qty</TableCell>\r\n                        <TableCell>Rate</TableCell>\r\n                        <TableCell>Total</TableCell>\r\n                        <TableCell width='10'>Delete</TableCell>\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        \r\n                        {this.state.buyingForm.items.map((item, index) =>(\r\n                            <TableRow hover key={index}>\r\n                                <TableCell>{item.name}</TableCell>\r\n                                <TableCell size='small'><TextField type='number' value={item.qty} fullWidth variant='standard' size='small' onChange={(e) => {this.qtyHandle(e, item)}} /></TableCell>\r\n                                <TableCell>{item.cost}</TableCell>\r\n                                <TableCell>{(item.cost*item.qty).toFixed(2)}</TableCell>\r\n                                <TableCell><DeleteIcon onClick={() => {this.deleteItem(item,index)}}/></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            \r\n            \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nBuying.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\n\r\n  export default withStyles(styles)(Buying);","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Header.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\POS.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js",["67"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FormControl from '@material-ui/core/FormControl'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        flexGrow:1,\r\n    },\r\n    form:{\r\n        marginTop: 15,\r\n        marginRight:10,\r\n        backgroundColor:'#D6D6D6',\r\n        padding:10,\r\n        minHeight:700,\r\n    },\r\n\r\n    paper:{\r\n        margin:14,\r\n        backgroundColor:'#D6D6D6',\r\n        minHeight:700,\r\n        textAlign: 'left',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    table:{\r\n        maxHeight:700,\r\n    },\r\n    tableRow: {\r\n        \"&.Mui-selected, &.Mui-selected:hover\": {\r\n          backgroundColor: \"#e9c46a\",\r\n        }\r\n      },\r\n\r\n\r\n}));\r\n\r\n\r\n\r\nexport default function Item() {\r\n    var timer\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState(false)\r\n    const [itemList, setItemList] = useState([])\r\n    const [itemObj, setItem] = useState({name:'', barcode_number:'', cost:'', srp:'', enable:true, supplier:'', packing:1})\r\n    const [itemFormStatus, setItemForm] = useState('Create')\r\n    const [columnToQuery, setColumnToQuery] = useState('name')\r\n    const [search, setSearch] = useState('')\r\n    const [markup, setMarkup] = useState(0)\r\n    const [margin, setMargin] = useState(0)\r\n    const [selectedRow, setSelectedRow] = useState(0)\r\n\r\n    function getCookie(name) {\r\n        let cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            const cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                const cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        // fetchItems\r\n        var url = 'http://127.0.0.1:8000/api/item-list/'\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => setItemList(response))\r\n        },[itemObj])\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setMessage(false);\r\n      };\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        console.log(itemObj)\r\n        var csrftoken = getCookie('csrftoken')\r\n        var url = 'http://127.0.0.1:8000/api/item-create/'\r\n\r\n        fetch(url, {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                'X-CSRFToken':csrftoken,\r\n            },\r\n            'body': JSON.stringify(itemObj)\r\n        }).then((response) => {\r\n            handleClearForm()\r\n            \r\n        })\r\n    }\r\n\r\n    const itemCreate = (e) =>{\r\n        if(itemFormStatus === 'View'){\r\n            setItemForm('Edit')\r\n            setItem({...itemObj, [e.target.id]:e.target.value})\r\n        }else{\r\n            setItem({...itemObj, [e.target.id]:e.target.value})\r\n        }\r\n    }\r\n\r\n    const handleEdit = (e) =>{\r\n        e.preventDefault()\r\n        var csrftoken = getCookie('csrftoken')\r\n        var url = `http://127.0.0.1:8000/api/item-update/${itemObj.id}/`\r\n        fetch(url, {\r\n            method: 'PUT',\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                'X-CSRFToken':csrftoken,\r\n            },\r\n            'body': JSON.stringify(itemObj)\r\n        })\r\n        .then((response) => {\r\n            setMessage(true)\r\n            handleClearForm()\r\n        })\r\n    }\r\n\r\n    const handleClearForm = (e) =>{\r\n        setItemForm('Create')\r\n        setSelectedRow('')\r\n        setMarkup(0)\r\n        setMargin(0)\r\n        setItem({...itemObj, id:null, name:'', barcode_number:'', cost:'', srp:'', supplier:'', enable:true, packing:1})\r\n    }\r\n\r\n    \r\n    const viewItemHandler = (e, item) => {\r\n        console.log(item.supplier)\r\n        clearTimeout(timer)\r\n        if(e.detail === 1){\r\n            timer = setTimeout(() => {\r\n            setSelectedRow(item.id)\r\n            setMargin((((item.srp - (item.cost/item.packing))/ item.srp)* 100).toFixed(2)+' %')\r\n            setMarkup((((item.srp - (item.cost/item.packing))/item.cost) * 100).toFixed(2) +' %')\r\n            setItem({...itemObj, id:item.id, name:item.name, barcode_number:item.barcode_number, cost:item.cost, srp:item.srp, enable:item.enable, packing:item.packing, supplier:item.supplier})\r\n            setItemForm('View')\r\n            }, 200)\r\n        }\r\n        else{\r\n            setSelectedRow(item.id)\r\n            setMargin((((item.srp - (item.cost/item.packing))/ item.srp)* 100).toFixed(2)+' %')\r\n            setMarkup((((item.srp - (item.cost/item.packing))/item.cost) * 100).toFixed(2) +' %')\r\n            setItem({...itemObj, id:item.id, name:item.name, barcode_number:item.barcode_number, cost:item.cost, srp:item.srp, enable:item.enable, packing:item.packing, supplier:item.supplier})\r\n            setItemForm('Edit')\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    const handleSelect = (e) =>{\r\n        setSearch('')\r\n        setColumnToQuery(e.target.value)\r\n    }\r\n\r\n    const handleCheckChange = () =>{\r\n        setItem({...itemObj, enable:!itemObj.enable})\r\n    }\r\n\r\n\r\n    const formatModifiedDate = (date_modified) =>{\r\n        var current_date = new Date()\r\n        var modified = new Date(date_modified)\r\n        var diff = current_date - modified\r\n        if(diff < 60000){\r\n            return ('Now')\r\n        }else if(diff > 60000 && diff < 3600000){\r\n            var mins_ago = diff/60000\r\n            return (Math.floor(mins_ago) + ' m')\r\n        }else if(diff > 3600000 && diff < 86400000){\r\n            var hours_ago = diff/3600000\r\n            return (Math.floor(hours_ago) + 'h')\r\n        }else if(diff > 86400000 && diff < 2.6280E+9){\r\n            var days_ago = diff/86400000\r\n            return(Math.floor(days_ago) + ' d')\r\n        }else if(diff > 2.6280E+9 && diff < 3.1536E+10){\r\n            var months_ago = diff/2.6280E+9\r\n            return(Math.floor(months_ago) + ' M')\r\n        }else if(diff >= 3.1536E+10){\r\n            var years_ago = diff/3.1536E+10\r\n            return(Math.floor(years_ago) + ' Y')\r\n        }\r\n\r\n    }\r\n    \r\n        return(\r\n            <div className={classes.root}>\r\n            \r\n            <Grid container spacing={1}>\r\n                <Grid item xs={7}> \r\n                <Paper className={classes.paper}>\r\n                <Grid container style={{padding:5}} spacing={2}>\r\n                    <Grid item xs={6}>\r\n                        <TextField type=\"search\" onChange={(e) => setSearch(e.target.value)} value={search} label='SEARCH' size='small' fullWidth variant='outlined' InputProps={{startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                        </InputAdornment>)}}/>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormControl fullWidth variant='outlined' size='small'>\r\n                        <Select onChange={(e) => handleSelect(e)} fullWidth variant='outlined'>\r\n                            <MenuItem value='name'>Name</MenuItem>\r\n                            <MenuItem value='barcode_number'>Barcode</MenuItem>\r\n                            <MenuItem value='cost'>Buying</MenuItem>\r\n                            <MenuItem value='srp'>Selling</MenuItem>\r\n                        </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <TableContainer className={classes.table}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Item Name</TableCell>\r\n                                <TableCell>Barcode</TableCell>\r\n                                <TableCell>Buying</TableCell>\r\n                                <TableCell>Selling</TableCell>\r\n                                <TableCell width='10'>Modified</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {itemList.filter((val) => {\r\n                        if(search === ''){\r\n                            return val\r\n                        }else if(val[columnToQuery].toLowerCase().includes(search.toLowerCase())){\r\n                            return val}\r\n                    }).map((item,key) =>(\r\n                        <TableRow className={classes.tableRow} selected={selectedRow === item.id} onClick={(e) => viewItemHandler(e, item)} key={item.id} hover>\r\n                           <TableCell>{item.name}</TableCell>\r\n                           <TableCell>{item.barcode_number}</TableCell>\r\n                           <TableCell>{item.cost}</TableCell>\r\n                           <TableCell>{item.srp}</TableCell>\r\n                           <TableCell>{formatModifiedDate(item.modified)} </TableCell>\r\n                           \r\n                        </TableRow>\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n                </Paper>\r\n                </Grid>\r\n                \r\n                <Grid item xs={5}>\r\n                    <Paper className={classes.form}>\r\n                        <Grid container item spacing={2}>\r\n                        <Grid item xs={12}>\r\n                        <Typography variant=\"h1\" style={{fontSize:30,textAlign:'left',borderRadius:5, color:'#333533',backgroundColor:'#ffd100'}} noWrap>Item {itemFormStatus} </Typography>\r\n                        \r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                        <TextField id='name' onChange={(e) => {itemCreate(e)}} fullWidth variant='outlined' value={itemObj.name} label='Name'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                        <TextField id='barcode_number' onChange={(e) => {itemCreate(e)}} fullWidth variant='outlined' value={itemObj.barcode_number} label='Barcode'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <TextField id='packing' onChange={(e) => {itemCreate(e)}} type='number' fullWidth variant='outlined' value={itemObj.packing} label='Packing'></TextField>\r\n                        </Grid>\r\n                        <Grid container item spacing={1}>\r\n                        <Grid item xs={4}>\r\n                        <TextField fullWidth id='cost' size='small' onChange={(e) => {itemCreate(e)}} type='number' value={itemObj.cost} variant='outlined' label='Buying'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <TextField fullWidth id='srp' size='small' onChange={(e) => {itemCreate(e)}} type='number' value={itemObj.srp} variant='outlined' label='Selling'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <FormControlLabel control={<Checkbox color={'primary'} onChange={() => handleCheckChange()} checked={itemObj.enable}/>} label='Enable'/>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <TextField fullWidth id='supplier' onChange={(e) => {itemCreate(e)}} size='small' value={itemObj.supplier} variant='outlined' label='Supplier'></TextField>\r\n                        </Grid>\r\n                        {itemFormStatus === 'Create' ? (\r\n                        <Grid container item style={{paddingTop:20}} spacing={1}>\r\n                            <Grid item xs={6}>\r\n                            <TextField disabled read_only size='small' fullWidth value={margin} variant='outlined' label='Margin'></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <TextField disabled read_only size='small' fullWidth value={markup} variant='outlined' label='Markup'></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n                        ):\r\n                        <Grid container item style={{paddingTop:20}} spacing={1}>\r\n                            <Grid item xs={6}>\r\n                            <TextField read_only size='small' fullWidth value={margin} variant='outlined' label='Margin'></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <TextField read_only size='small' fullWidth value={markup} variant='outlined' label='Markup'></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n                        }\r\n                        \r\n                        <Grid container item spacing={1}>\r\n                        <Grid item xs={6}>\r\n                            {itemFormStatus === 'Create' && (itemObj.name !== '' && itemObj.barcode_number !== '' && itemObj.cost !== '' && itemObj.srp !== '') ? (\r\n                            <Button fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Submit</Button>\r\n                            ):itemFormStatus === 'Edit' && (itemObj.name === '' || itemObj.barcode_number === '' || itemObj.cost === '' || itemObj.srp === '') ? (\r\n                            <Button disabled fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Save</Button>\r\n                            ):itemFormStatus === 'Edit' && (itemObj.name !== '' || itemObj.barcode_number !== '' || itemObj.cost !== '' || itemObj.srp !== '') ? (\r\n                            <Button fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleEdit(e, itemObj)}>Save</Button>\r\n                            ):<Button disabled fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Submit</Button>\r\n\r\n                            }\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {itemObj.name !== '' || itemObj.barcode_number !== '' || itemObj.cost !== '' || itemObj.srp !== ''? (\r\n                            <Button fullWidth size='large' variant='contained' color='secondary' onClick={(e) => handleClearForm(e)}>Clear</Button>\r\n                            ):<Button disabled fullWidth size='large' variant='contained' color='secondary' onClick={(e) => handleClearForm(e)}>Clear</Button>\r\n                        }\r\n                        </Grid>\r\n                        </Grid>\r\n                        </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n                \r\n            </Grid>   \r\n            <Snackbar anchorOrigin={{vertical: 'bottom', horizontal:'right'}} autoHideDuration={6000} open={message} onClose={handleClose}>\r\n            <Alert variant='filled' elevation={6} onClose={handleClose} severity=\"success\">\r\n                Saved\r\n            </Alert>\r\n            </Snackbar>\r\n            </div>\r\n        );\r\n    }\r\n","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Receive.js",["68"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\BuyingList.js",["69","70","71","72","73"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\BuyingDetail.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87"],"import React, { useEffect, useState } from 'react';\r\nimport styles, { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paperDetail:{\r\n        padding:5,\r\n        backgroundColor:'#d6d6d6',\r\n        minHeight:125,\r\n        margin:15,\r\n    },\r\n\r\n    form:{\r\n        minHeight:650,\r\n        margin:15,\r\n        marginLeft:15,\r\n        backgroundColor:'#D6D6D6',\r\n        padding:5\r\n    },\r\n\r\n    paper: {\r\n        padding:5,\r\n        margin:15,\r\n        textAlign: 'center',\r\n        backgroundColor:'#D6D6D6'\r\n      },\r\n\r\n}))\r\n\r\n\r\nfunction BuyingDetail(props) {\r\n    \r\n    const classes = useStyles();\r\n    const [purchaseOrder, setPurchaseOrder] = useState({purchase_order_number:'', status:'', supplier:'', items:[]})\r\n    const [itemList, setItemList] = useState([])\r\n    const [columnToQuery, setColumnToQuery] = useState('name')\r\n    const [search, setSearch] = useState('')\r\n\r\n\r\n    useEffect(() => {\r\n        fetchPurchaseOrder();\r\n        fetchItem()\r\n    },[])\r\n\r\n    const fetchPurchaseOrder = () =>{\r\n        var url = `http://127.0.0.1:8000/api/purchaseorder-detail/${props.match.params.purchase_order_number}`\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => {setPurchaseOrder(response)})\r\n    }\r\n\r\n    const fetchItem = () =>{\r\n        var url = 'http://127.0.0.1:8000/api/item-list-active/'\r\n\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => setItemList(response))\r\n    }\r\n\r\n    const formatDate = (date) =>{\r\n        var formatDate = new Date(date)\r\n        var year = formatDate.getFullYear();\r\n        var month = (1 + formatDate.getMonth()).toString();\r\n        month = month.length > 1 ? month : '0' + month;\r\n        var day = formatDate.getDate().toString();\r\n        day = day.length > 1 ? day : '0' + day;\r\n        var hour = (formatDate.getHours()).toString();\r\n        hour = hour.length > 1? hour :  '0' + hour;\r\n        var minute = formatDate.getMinutes().toString()\r\n        minute = minute.length > 1 ?  minute: '0' + minute;\r\n        var second = formatDate.getSeconds().toString();\r\n        second = second.length > 1 ?  second: '0' + second;\r\n        return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':' + second\r\n\r\n    }\r\n    const totalPayment = purchaseOrder.items.reduce((total, current) => total + (current.qty * current.cost),0)\r\n    const totalQty = purchaseOrder.items.reduce((total, current) => total + current.qty ,0)\r\n\r\n    return (\r\n        <>\r\n          <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    <Paper className={classes.paperDetail}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6}>\r\n                                <TextField style={{margin:10}} fullWidth label=\"Date\" value={formatDate(purchaseOrder.posting_datetime)} variant='outlined' size='small' className='date' type='datetime-local'></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField style={{margin:10}} fullWidth label=\"Purchase Order\" variant='outlined' size='small' value={purchaseOrder.purchase_order_number}></TextField>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6}>\r\n                                <TextField style={{margin:10}} fullWidth label='Supplier' variant='outlined' size='small' value={purchaseOrder.supplier}></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField style={{margin:10}} fullWidth label=\"Status\" variant='outlined' size='small' value={purchaseOrder.status}></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    <Paper className={classes.paperDetail}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6}>\r\n                                <TextField label='Total Amount' read_only value={totalPayment} style={{margin:10}} size='small' variant='outlined'></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={6}>  \r\n                                <TextField label='Total Qty' read_only value={totalQty} style={{margin:10}} size='small' variant='outlined'></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={4}>\r\n                                <Button fullWidth style={{margin:10}} variant=\"contained\" type='button' color='secondary'> Cancel</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={2}>\r\n\r\n            <Grid item xs={12}>\r\n            <Paper className={classes.form}>\r\n\r\n                <TableContainer style={{maxHeight:650}} className={classes.table}>\r\n                    <Table stickyHeader size='small'>\r\n                    <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Item Name</TableCell>\r\n                        <TableCell width='15%'>Qty</TableCell>\r\n                        <TableCell>Rate</TableCell>\r\n                        <TableCell>Total</TableCell>\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {purchaseOrder.items.map((item, index) =>(\r\n                            <TableRow hover key={index}>\r\n                                <TableCell>{item.name}</TableCell>\r\n                                <TableCell>{item.qty}</TableCell>\r\n                                <TableCell>{item.cost}</TableCell>\r\n                                <TableCell>{(item.cost*item.qty).toFixed(2)}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BuyingDetail;",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":15,"column":3,"nodeType":"94","messageId":"95","endLine":17,"endColumn":4},{"ruleId":"96","severity":1,"message":"97","line":15,"column":10,"nodeType":"98","messageId":"99","endLine":15,"endColumn":20},{"ruleId":"96","severity":1,"message":"100","line":20,"column":8,"nodeType":"98","messageId":"99","endLine":20,"endColumn":24},{"ruleId":"96","severity":1,"message":"101","line":22,"column":10,"nodeType":"98","messageId":"99","endLine":22,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":345,"column":154,"nodeType":"104","endLine":345,"endColumn":169},{"ruleId":"105","severity":1,"message":"106","line":385,"column":55,"nodeType":"107","messageId":"108","endLine":385,"endColumn":57},{"ruleId":"105","severity":1,"message":"106","line":252,"column":44,"nodeType":"107","messageId":"108","endLine":252,"endColumn":46},{"ruleId":"109","severity":1,"message":"110","line":106,"column":7,"nodeType":"111","endLine":106,"endColumn":9,"suggestions":"112"},{"ruleId":"96","severity":1,"message":"113","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":14},{"ruleId":"96","severity":1,"message":"97","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":18},{"ruleId":"114","severity":1,"message":"115","line":75,"column":9,"nodeType":"116","messageId":"117","endLine":77,"endColumn":12},{"ruleId":"105","severity":1,"message":"106","line":128,"column":61,"nodeType":"107","messageId":"108","endLine":128,"endColumn":63},{"ruleId":"118","severity":1,"message":"119","line":137,"column":55,"nodeType":"120","messageId":"121","endLine":137,"endColumn":57},{"ruleId":"96","severity":1,"message":"113","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":14},{"ruleId":"96","severity":1,"message":"122","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":22},{"ruleId":"96","severity":1,"message":"123","line":8,"column":8,"nodeType":"98","messageId":"99","endLine":8,"endColumn":18},{"ruleId":"96","severity":1,"message":"100","line":9,"column":8,"nodeType":"98","messageId":"99","endLine":9,"endColumn":24},{"ruleId":"96","severity":1,"message":"124","line":10,"column":8,"nodeType":"98","messageId":"99","endLine":10,"endColumn":19},{"ruleId":"96","severity":1,"message":"125","line":11,"column":8,"nodeType":"98","messageId":"99","endLine":11,"endColumn":14},{"ruleId":"96","severity":1,"message":"126","line":12,"column":8,"nodeType":"98","messageId":"99","endLine":12,"endColumn":16},{"ruleId":"96","severity":1,"message":"127","line":19,"column":8,"nodeType":"98","messageId":"99","endLine":19,"endColumn":18},{"ruleId":"96","severity":1,"message":"128","line":52,"column":12,"nodeType":"98","messageId":"99","endLine":52,"endColumn":20},{"ruleId":"96","severity":1,"message":"129","line":53,"column":12,"nodeType":"98","messageId":"99","endLine":53,"endColumn":25},{"ruleId":"96","severity":1,"message":"130","line":53,"column":27,"nodeType":"98","messageId":"99","endLine":53,"endColumn":43},{"ruleId":"96","severity":1,"message":"131","line":54,"column":12,"nodeType":"98","messageId":"99","endLine":54,"endColumn":18},{"ruleId":"96","severity":1,"message":"132","line":54,"column":20,"nodeType":"98","messageId":"99","endLine":54,"endColumn":29},{"ruleId":"109","severity":1,"message":"133","line":60,"column":7,"nodeType":"111","endLine":60,"endColumn":9,"suggestions":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'FormControlLabel' is defined but never used.","'useHistory' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formatDate' and 'purchaseReceiptForm.posting_datetime'. Either include them or remove the dependency array.","ArrayExpression",["137"],"'styles' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'InputAdornment' is defined but never used.","'SearchIcon' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'DeleteIcon' is defined but never used.","'itemList' is assigned a value but never used.","'columnToQuery' is assigned a value but never used.","'setColumnToQuery' is assigned a value but never used.","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchPurchaseOrder'. Either include it or remove the dependency array.",["138"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [formatDate, purchaseReceiptForm.posting_datetime]",{"range":"143","text":"144"},"Update the dependencies array to be: [fetchPurchaseOrder]",{"range":"145","text":"146"},[3282,3284],"[formatDate, purchaseReceiptForm.posting_datetime]",[1917,1919],"[fetchPurchaseOrder]"]