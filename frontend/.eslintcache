[{"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js":"1","C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js":"3","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Sidebar.js":"4","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js":"5","C:\\Users\\baban\\Documents\\project\\frontend\\src\\pages\\Item.js":"6","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js":"7","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js":"8","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js":"9","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Modals.js":"10"},{"size":500,"mtime":1608125774694,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1073,"mtime":1608352824910,"results":"14","hashOfConfig":"12"},{"size":1589,"mtime":1608364098277,"results":"15","hashOfConfig":"12"},{"size":485,"mtime":1608037248696,"results":"16","hashOfConfig":"12"},{"size":202,"mtime":1608037480411,"results":"17","hashOfConfig":"12"},{"size":12076,"mtime":1610003156038,"results":"18","hashOfConfig":"12"},{"size":172,"mtime":1608131566916,"results":"19","hashOfConfig":"12"},{"size":201,"mtime":1608174481299,"results":"20","hashOfConfig":"12"},{"size":252,"mtime":1609741449463,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"jwp6b1",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js",[],["45","46"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Sidebar.js",["47"],"import React from 'react';\r\nimport '../App.css';\r\nimport {SidebarData} from './SidebarData';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass Sidebar extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n \r\n\r\n\r\n    render(){\r\n        var self = this\r\n        return(\r\n            <>\r\n            <div className='navbar'>\r\n                <Link to='#' className='menu-bars'>\r\n                    <FaIcons.FaBars className={this.props.toggle ? 'logo active' : 'logo'} onClick={()=> this.props.onClick(this.props.toggle)}/>\r\n                </Link>\r\n            </div>\r\n               <nav className={self.props.toggle ? 'nav-menu active' : 'nav-menu'}> \r\n                <ul className='nav-menu-items' onClick={()=> this.props.onClick(this.props.toggle)}>\r\n                    {SidebarData.map((val, index) =>{\r\n                        return(   \r\n                        <li key={index} className='sidebaritem' id={window.location.pathname === val.link ? \"active\" : \"\"} onClick={() => {window.location.pathname = val.link}}>\r\n                            <div id='icon'>\r\n                                {val.icon}\r\n                            </div>\r\n\r\n                            <div id='title'>\r\n                                {val.title}\r\n                            </div>\r\n\r\n                        </li>\r\n                        );\r\n                    })}\r\n                    </ul>\r\n               </nav>\r\n        </>\r\n            \r\n            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\pages\\Item.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js",["48","49","50","51","52","53"],"import React from 'react'\r\nimport '../App.css'\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nclass Item extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            itemList:[],\r\n            posList:[],\r\n            filteredData: [],\r\n            itemCreate:{\r\n                id:null,\r\n                name:'',\r\n                cost:'',\r\n                srp:'',\r\n\r\n            },\r\n            page:0,\r\n            rowsPerPage:10,\r\n            query:'',\r\n            searchInput:'',\r\n            itemCreateModal: false,\r\n            posPaymentModal: false,\r\n            addToPosTable:0, \r\n            totalPayment:0,\r\n            payment:'',\r\n            change:0,\r\n            \r\n\r\n        }\r\n        this.fetchItem = this.fetchItem.bind(this)\r\n        this.handleChangePage = this.handleChangePage.bind(this)\r\n        this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.addToPosTable = this.addToPosTable.bind(this)\r\n        this.handleItemCreateOpen = this.handleItemCreateOpen.bind(this)\r\n        this.handleItemCreateClose = this.handleItemCreateClose.bind(this)\r\n        this.handlePaymentSubmit = this.handlePaymentSubmit.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleCreate = this.handleCreate.bind(this)\r\n    }\r\n\r\n    getCookie(name) {\r\n        let cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            const cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                const cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.fetchItem()\r\n    }\r\n\r\n    fetchItem(){\r\n        console.log('fetching...')\r\n        var url = 'http://127.0.0.1:8000/api/item-list/'\r\n\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({\r\n            itemList:data\r\n        }))\r\n    }\r\n\r\n\r\n    handleChangePage(event, newPage){\r\n        console.log('testing')\r\n        this.setState({\r\n            page:newPage,\r\n        })\r\n    }\r\n\r\n    handleChangeRowsPerPage(event){\r\n        this.setState({\r\n            rowsPerPage:event.target.value,\r\n        })\r\n    }\r\n\r\n    handleChange(event){\r\n        console.log('testing', event.target.value)\r\n        this.setState({\r\n            columnToQuery:event.target.value\r\n        })\r\n    }\r\n\r\n    addToPosTable(i, name, srp){\r\n        const obj = {'name':name, 'srp':srp, 'total':srp * i,  'qty':i}\r\n        this.setState({\r\n            posList:[\r\n                ...this.state.posList,\r\n                obj,\r\n            ],\r\n\r\n            totalPayment: this.state.totalPayment + obj.total\r\n            \r\n        })  \r\n    }\r\n\r\n    getChange = (event) =>{\r\n      this.setState({\r\n        payment:event.target.value,\r\n        change: event.target.value - this.state.totalPayment \r\n      })\r\n    }\r\n\r\n    handlePaymentOpen = () => {\r\n      this.setState({\r\n        posPaymentModal:true,\r\n      })\r\n    }\r\n\r\n    handlePaymentClose = () =>{\r\n      this.setState({\r\n        posPaymentModal:false,\r\n        payment:'',\r\n        change:''\r\n      })\r\n    }\r\n\r\n    handlePaymentSubmit = (event) =>{\r\n      console.log(this.state.posList)\r\n    }\r\n\r\n\r\n    handleItemCreateOpen = () =>{\r\n        this.setState({\r\n            itemCreateModal:true,\r\n        })  \r\n    }\r\n    handleItemCreateClose = () =>{\r\n        this.setState({\r\n            itemCreate:{\r\n                id:null,\r\n                name:'',\r\n                srp:'',\r\n                cost:'',\r\n            },\r\n            itemCreateModal:false,\r\n        })\r\n    }\r\n\r\n    handleCreate(event){\r\n\r\n        this.setState({\r\n            itemCreate:{\r\n                ...this.state.itemCreate,\r\n                [event.target.id]:event.target.value,\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault()\r\n        var csrftoken = this.getCookie('csrftoken')\r\n        var url = 'http://127.0.0.1:8000/api/item-create/'\r\n        fetch(url,{\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                'X-CSRFToken':csrftoken,\r\n            },\r\n            'body': JSON.stringify(this.state.itemCreate)\r\n        }).then((response) => {\r\n            this.fetchItem()\r\n            this.setState({\r\n                itemCreate:{\r\n                    id:null,\r\n                    name:'',\r\n                    srp:'',\r\n                    cost:'',\r\n                }\r\n            })\r\n        })\r\n    }\r\n    \r\n\r\n\r\n    render(){\r\n      const columns = [\r\n        {\r\n          name: 'name',\r\n          label: 'Item Name',\r\n          options:{\r\n            filter: true,\r\n            sort: true,\r\n          }\r\n        },\r\n        {\r\n          name: 'srp',\r\n          label: 'SRP',\r\n          options:{\r\n            filter:true,\r\n            sort:true,\r\n          }\r\n        },\r\n        {\r\n          name: 'balance',\r\n          labal: 'Balance',\r\n\r\n        },\r\n          \r\n      ]\r\n\r\n      const options = {\r\n        filterType: \"dropdown\",\r\n        download:false,\r\n        selectableRows:'none',\r\n        print:false,\r\n        rowsPerPage:10,\r\n        onRowClick: (rowData, rowMeta) => {\r\n          const obj = {name: rowData[0], srp:rowData[1]}\r\n          this.setState({\r\n            posList:[\r\n              ...this.state.posList,\r\n              obj,\r\n            ]\r\n          })\r\n        }\r\n\r\n\r\n      }\r\n        var items = this.state.itemList\r\n        return(\r\n        <>\r\n        <div className='grid-container'>\r\n        <div className='grid-item'>\r\n\r\n        <MUIDataTable\r\n      title={\"Item List\"}\r\n      data={items}\r\n      columns={columns}\r\n      options={options}\r\n    />\r\n\r\n        {/* <TableContainer>\r\n\r\n        <TextField label=\"Item Search\" style={{marginTop:5, marginBottom:5}} className={this.props.toggle ? 'item-search active' : 'item-search' } variant=\"outlined\" value={this.state.searchInput || ''} onChange={this.handleSearch}/>\r\n            \r\n        <Table aria-label=\"sticky table\">\r\n        <TableHead style={{backgroundColor:'#139bf7', borderRadius:50, width:50, border:0.5}}>\r\n          <TableRow >\r\n            <TableCell align=\"left\">Items Name</TableCell>\r\n            <TableCell align=\"right\">Price</TableCell>\r\n            <TableCell align=\"right\">Balance</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody className='table-row'>\r\n          {items.slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((item, index) => (\r\n            <TableRow key={index}  onClick={() => this.addToPosTable(index, item.name, item.srp)}>\r\n              <TableCell component=\"th\" scope=\"row\">{item.name}</TableCell>\r\n              <TableCell align=\"right\">{item.srp}</TableCell>\r\n              <TableCell align=\"right\">{item.srp}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    <TablePagination\r\n        rowsPerPageOptions={[10, 20]}\r\n        component=\"div\"\r\n        count={items.length}\r\n        rowsPerPage={this.state.rowsPerPage}\r\n        page={this.state.page}\r\n        onChangePage={this.handleChangePage}\r\n        onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n        />\r\n\r\n        \r\n\r\n      </TableContainer> */}\r\n        \r\n        </div>\r\n\r\n        <div className='grid-item'>\r\n\r\n            <div>\r\n              \r\n    <TableContainer >\r\n      <Table aria-label=\"spanning table\">\r\n      <TableHead className='class-table'>\r\n          <TableRow>\r\n            <TableCell>Desc.</TableCell>\r\n            <TableCell align=\"right\">Qty.</TableCell>\r\n            <TableCell align=\"right\">Unit</TableCell>\r\n            <TableCell align=\"right\">Sum</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {this.state.posList.map((row, index) => (\r\n            <TableRow key={index}>\r\n              <TableCell>{row.name}</TableCell>\r\n              <TableCell align=\"right\">{row.qty}</TableCell>\r\n              <TableCell align=\"right\">{row.srp}</TableCell>\r\n              <TableCell align=\"right\">{row.total}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n\r\n      </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n\r\n          </div>\r\n          </div>        \r\n          </div>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleItemCreateOpen}>\r\n            Create Item\r\n          </Button>\r\n\r\n            <div className='pos-item-summary'>\r\n            <Button onClick={this.handlePaymentSubmit} style={{marginLeft:20, height:200, width:120, backgroundColor:'#3595b5', color:'white', fontSize:25}} variant=\"outlined\" size='large'>\r\n                Submit\r\n            </Button>\r\n            </div>\r\n          \r\n            <div className='pos-item-summary'>\r\n              <TextField id=\"totalpayment\" type='number' onClick={this.getTotal} label=\"Total\" value={this.state.totalPayment} InputProps={{readOnly: true,}} variant=\"outlined\"/>\r\n              <br></br>\r\n              <TextField id='payment' onChange={(e) =>this.getChange(e)} placeholder='0' value={this.state.payment} type='number' margin='normal' label='Enter Amount' variant='outlined'/>\r\n              <br></br>\r\n              <TextField id='change' type='number' margin='normal' label='Change' variant='outlined' InputProps={{readOnly:true}} value={this.state.change}/>\r\n            </div>\r\n\r\n            \r\n\r\n\r\n\r\n\r\n        <Dialog open={this.state.itemCreateModal} onClose={this.handleItemCreateClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Create Item</DialogTitle>\r\n        <DialogContent >\r\n          <TextField autoFocus onChange={(e) =>this.handleCreate(e)} margin=\"normal\" id=\"name\" value={this.state.itemCreate.name} placeholder=\"Item Name\" label=\"Item Name\" type=\"name\" fullWidth variant=\"outlined\"/>\r\n          <TextField autoFocus onChange={(e) =>this.handleCreate(e)} margin=\"normal\" id=\"cost\" placeholder='0' value={this.state.itemCreate.cost}label=\"Item Cost\" type=\"name\" fullWidth variant=\"outlined\"/>\r\n          <TextField autoFocus onChange={(e) => this.handleCreate(e)} margin=\"normal\" id=\"srp\" placeholder='0' value={this.state.itemCreate.srp} label=\"Item SRP\" type=\"srp\" fullWidth variant=\"outlined\"/>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant='contained'  onClick={this.handleItemCreateClose}>Cancel</Button>\r\n          <Button variant='contained' color='primary' onClick={this.handleSubmit}>Submit</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n\r\n      \r\n        </>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default Item ","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Modals.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":10,"column":5,"nodeType":"60","messageId":"61","endLine":12,"endColumn":6},{"ruleId":"62","severity":1,"message":"63","line":9,"column":8,"nodeType":"64","messageId":"65","endLine":9,"endColumn":13},{"ruleId":"62","severity":1,"message":"66","line":10,"column":8,"nodeType":"64","messageId":"65","endLine":10,"endColumn":23},{"ruleId":"62","severity":1,"message":"67","line":12,"column":8,"nodeType":"64","messageId":"65","endLine":12,"endColumn":14},{"ruleId":"62","severity":1,"message":"68","line":13,"column":8,"nodeType":"64","messageId":"65","endLine":13,"endColumn":16},{"ruleId":"62","severity":1,"message":"69","line":14,"column":8,"nodeType":"64","messageId":"65","endLine":14,"endColumn":18},{"ruleId":"62","severity":1,"message":"70","line":22,"column":8,"nodeType":"64","messageId":"65","endLine":22,"endColumn":25},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'TablePagination' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'InputLabel' is defined but never used.","'DialogContentText' is defined but never used.","no-global-assign","no-unsafe-negation"]