[{"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js":"1","C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js":"3","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js":"4","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js":"5","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js":"6","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Buying.js":"7","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Header.js":"8","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\POS.js":"9","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js":"10","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Receive.js":"11","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\BuyingList.js":"12"},{"size":543,"mtime":1616857251008,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1083,"mtime":1617897998159,"results":"16","hashOfConfig":"14"},{"size":965,"mtime":1617898073788,"results":"17","hashOfConfig":"14"},{"size":172,"mtime":1608131566916,"results":"18","hashOfConfig":"14"},{"size":201,"mtime":1608174481299,"results":"19","hashOfConfig":"14"},{"size":14864,"mtime":1617964199531,"results":"20","hashOfConfig":"14"},{"size":3953,"mtime":1617761406499,"results":"21","hashOfConfig":"14"},{"size":11452,"mtime":1616234097145,"results":"22","hashOfConfig":"14"},{"size":15804,"mtime":1617957842303,"results":"23","hashOfConfig":"14"},{"size":11808,"mtime":1617943800512,"results":"24","hashOfConfig":"14"},{"size":4707,"mtime":1617958875243,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"jwp6b1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\baban\\Documents\\project\\frontend\\src\\index.js",[],["54","55"],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\App.js",["56"],"import './App.css';\nimport Header from './Components/Header'\nimport Item from './Pages/Item'\nimport About from './Pages/About'\nimport Home from './Pages/Home'\nimport Buying from './Pages/Buying'\nimport Receive from './Pages/Receive'\nimport POS from './Pages/POS'\nimport BuyingList from './Pages/BuyingList'\nimport React from 'react'\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    return(\n        <div className='App'>\n      <Router>\n      <Header/>\n        <Switch>\n          <Route path='/'  exact component={Home}/>\n          <Route path='/buying' exact component={Buying}/>\n          <Route path='/buyingList' exact component={BuyingList}/>\n          <Route path='/item' exact component={Item}/>\n          <Route path='/receive' exact component={Receive}/>\n          <Route path='/pos' exact component={POS}/>\n          <Route path='/about' exact component={About}/>\n        </Switch>\n      </Router>\n        \n        </div>\n    )\n  }\n}\n\nexport default App;\n","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\SidebarData.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\About.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Home.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Buying.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Components\\Header.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\POS.js",[],"C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Item.js",["57"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FormControl from '@material-ui/core/FormControl'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        flexGrow:1,\r\n    },\r\n    form:{\r\n        marginTop: 15,\r\n        marginRight:10,\r\n        backgroundColor:'#D6D6D6',\r\n        padding:10,\r\n        minHeight:700,\r\n    },\r\n\r\n    paper:{\r\n        margin:14,\r\n        backgroundColor:'#D6D6D6',\r\n        minHeight:700,\r\n        textAlign: 'left',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    table:{\r\n        maxHeight:700,\r\n    },\r\n    tableRow: {\r\n        \"&.Mui-selected, &.Mui-selected:hover\": {\r\n          backgroundColor: \"#e9c46a\",\r\n        }\r\n      },\r\n\r\n\r\n}));\r\n\r\n\r\n\r\nexport default function Item() {\r\n    var timer\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState(false)\r\n    const [itemList, setItemList] = useState([])\r\n    const [itemObj, setItem] = useState({name:'', barcode_number:'', cost:'', srp:'', enable:true, packing:1})\r\n    const [itemFormStatus, setItemForm] = useState('Create')\r\n    const [columnToQuery, setColumnToQuery] = useState('name')\r\n    const [search, setSearch] = useState('')\r\n    const [markup, setMarkup] = useState(0)\r\n    const [margin, setMargin] = useState(0)\r\n    const [selectedRow, setSelectedRow] = useState(0)\r\n\r\n    function getCookie(name) {\r\n        let cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            const cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                const cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        // fetchItems\r\n        var url = 'http://127.0.0.1:8000/api/item-list/'\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => setItemList(response))\r\n        },[itemObj])\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setMessage(false);\r\n      };\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        var csrftoken = getCookie('csrftoken')\r\n        var url = 'http://127.0.0.1:8000/api/item-create/'\r\n\r\n        fetch(url, {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                'X-CSRFToken':csrftoken,\r\n            },\r\n            'body': JSON.stringify(itemObj)\r\n        }).then((response) => {\r\n            handleClearForm()\r\n            \r\n        })\r\n    }\r\n\r\n    const itemCreate = (e) =>{\r\n        setItem({...itemObj, [e.target.id]:e.target.value})\r\n    }\r\n\r\n    const handleEdit = (e) =>{\r\n        e.preventDefault()\r\n        var csrftoken = getCookie('csrftoken')\r\n        var url = `http://127.0.0.1:8000/api/item-update/${itemObj.id}/`\r\n        fetch(url, {\r\n            method: 'PUT',\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                'X-CSRFToken':csrftoken,\r\n            },\r\n            'body': JSON.stringify(itemObj)\r\n        })\r\n        .then((response) => {\r\n            setMessage(true)\r\n            handleClearForm()\r\n        })\r\n    }\r\n\r\n    const handleClearForm = (e) =>{\r\n        setItemForm('Create')\r\n        setSelectedRow('')\r\n        setMarkup(0)\r\n        setMargin(0)\r\n        setItem({...itemObj, id:null, name:'', barcode_number:'', cost:'', srp:'', enable:true, packing:1})\r\n    }\r\n\r\n    \r\n    const viewItemHandler = (e, item) => {\r\n        clearTimeout(timer)\r\n        if(e.detail === 1){\r\n            timer = setTimeout(() => {\r\n            setSelectedRow(item.id)\r\n            setMargin((((item.srp - (item.cost/item.packing))/ item.srp)* 100).toFixed(2)+' %')\r\n            setMarkup((((item.srp - (item.cost/item.packing))/item.cost) * 100).toFixed(2) +' %')\r\n            setItem({...itemObj, id:item.id, name:item.name, barcode_number:item.barcode_number, cost:item.cost, srp:item.srp, enable:item.enable, packing:item.packing})\r\n            setItemForm('View')\r\n            }, 200)\r\n        }\r\n        else{\r\n            setSelectedRow(item.id)\r\n            setMargin((((item.srp - (item.cost/item.packing))/ item.srp)* 100).toFixed(2)+' %')\r\n            setMarkup((((item.srp - (item.cost/item.packing))/item.cost) * 100).toFixed(2) +' %')\r\n            setItem({...itemObj, id:item.id, name:item.name, barcode_number:item.barcode_number, cost:item.cost, srp:item.srp, enable:item.enable, packing:item.packing})\r\n            setItemForm('Edit')\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    const handleSelect = (e) =>{\r\n        setSearch('')\r\n        setColumnToQuery(e.target.value)\r\n    }\r\n\r\n    const handleCheckChange = () =>{\r\n        setItem({...itemObj, enable:!itemObj.enable})\r\n    }\r\n\r\n\r\n    const formatModifiedDate = (date_modified) =>{\r\n        var current_date = new Date()\r\n        var modified = new Date(date_modified)\r\n        var diff = current_date - modified\r\n        if(diff < 60000){\r\n            return ('Now')\r\n        }else if(diff > 60000 && diff < 3600000){\r\n            var mins_ago = diff/60000\r\n            return (Math.floor(mins_ago) + ' m')\r\n        }else if(diff > 3600000 && diff < 86400000){\r\n            var hours_ago = diff/3600000\r\n            return (Math.floor(hours_ago) + 'h')\r\n        }else if(diff > 86400000 && diff < 2.6280E+9){\r\n            var days_ago = diff/86400000\r\n            return(Math.floor(days_ago) + ' d')\r\n        }else if(diff > 2.6280E+9 && diff < 3.1536E+10){\r\n            var months_ago = diff/2.6280E+9\r\n            return(Math.floor(months_ago) + ' M')\r\n        }else if(diff >= 3.1536E+10){\r\n            var years_ago = diff/3.1536E+10\r\n            return(Math.floor(years_ago) + ' Y')\r\n        }\r\n\r\n    }\r\n    \r\n        return(\r\n            <div className={classes.root}>\r\n            \r\n            <Grid container spacing={1}>\r\n                <Grid item xs={7}> \r\n                <Paper className={classes.paper}>\r\n                <Grid container style={{padding:5}} spacing={2}>\r\n                    <Grid item xs={6}>\r\n                        <TextField type=\"search\" onChange={(e) => setSearch(e.target.value)} value={search} label='SEARCH' size='small' fullWidth variant='outlined' InputProps={{startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                        </InputAdornment>)}}/>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormControl fullWidth variant='outlined' size='small'>\r\n                        <Select onChange={(e) => handleSelect(e)} fullWidth variant='outlined'>\r\n                            <MenuItem value='name'>Name</MenuItem>\r\n                            <MenuItem value='barcode_number'>Barcode</MenuItem>\r\n                            <MenuItem value='cost'>Buying</MenuItem>\r\n                            <MenuItem value='srp'>Selling</MenuItem>\r\n                        </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <TableContainer className={classes.table}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Item Name</TableCell>\r\n                                <TableCell>Barcode</TableCell>\r\n                                <TableCell>Buying</TableCell>\r\n                                <TableCell>Selling</TableCell>\r\n                                <TableCell width='10'>Modified</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {itemList.filter((val) => {\r\n                        if(search === ''){\r\n                            return val\r\n                        }else if(val[columnToQuery].toLowerCase().includes(search.toLowerCase())){\r\n                            return val}\r\n                    }).map((item,key) =>(\r\n                        <TableRow className={classes.tableRow} selected={selectedRow === item.id} onClick={(e) => viewItemHandler(e, item)} key={item.id} hover>\r\n                           <TableCell>{item.name}</TableCell>\r\n                           <TableCell>{item.barcode_number}</TableCell>\r\n                           <TableCell>{item.cost}</TableCell>\r\n                           <TableCell>{item.srp}</TableCell>\r\n                           <TableCell>{formatModifiedDate(item.modified)} </TableCell>\r\n                           \r\n                        </TableRow>\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n                </Paper>\r\n                </Grid>\r\n                \r\n                <Grid item xs={5}>\r\n                    <Paper className={classes.form}>\r\n                        <Grid container item spacing={2}>\r\n                        <Grid item xs={12}>\r\n                        <Typography variant=\"h1\" style={{fontSize:30,textAlign:'left',borderRadius:5, color:'#333533',backgroundColor:'#ffd100'}} noWrap>Item {itemFormStatus} </Typography>\r\n                        \r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                        <TextField id='name' onChange={(e) => {itemCreate(e)}} fullWidth variant='outlined' value={itemObj.name} label='Name'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                        <TextField id='barcode_number' onChange={(e) => {itemCreate(e)}} fullWidth variant='outlined' value={itemObj.barcode_number} label='Barcode'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <TextField id='packing' onChange={(e) => {itemCreate(e)}} type='number' fullWidth variant='outlined' value={itemObj.packing} label='Packing'></TextField>\r\n                        </Grid>\r\n                        <Grid container item spacing={1}>\r\n                        <Grid item xs={4}>\r\n                        <TextField fullWidth id='cost' size='small' onChange={(e) => {itemCreate(e)}} type='number' value={itemObj.cost} variant='outlined' label='Buying'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <TextField fullWidth id='srp' size='small' onChange={(e) => {itemCreate(e)}} type='number' value={itemObj.srp} variant='outlined' label='Selling'></TextField>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <FormControlLabel control={<Checkbox color={'primary'} onChange={() => handleCheckChange()} checked={itemObj.enable}/>} label='Enable'/>\r\n                        </Grid>\r\n                        {itemFormStatus === 'Create' ? (\r\n                        <Grid container item style={{paddingTop:20}} spacing={1}>\r\n                            <Grid item xs={6}>\r\n                            <TextField disabled read_only size='small' fullWidth value={margin} variant='outlined' label='Margin'></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <TextField disabled read_only size='small' fullWidth value={markup} variant='outlined' label='Markup'></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n                        ):\r\n                        <Grid container item style={{paddingTop:20}} spacing={1}>\r\n                            <Grid item xs={6}>\r\n                            <TextField read_only size='small' fullWidth value={margin} variant='outlined' label='Margin'></TextField>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <TextField read_only size='small' fullWidth value={markup} variant='outlined' label='Markup'></TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n                        }\r\n                        \r\n                        <Grid container item spacing={1}>\r\n                        <Grid item xs={6}>\r\n                            {itemFormStatus === 'Create' && (itemObj.name !== '' && itemObj.barcode_number !== '' && itemObj.cost !== '' && itemObj.srp !== '') ? (\r\n                            <Button fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Submit</Button>\r\n                            ):itemFormStatus === 'Edit' && (itemObj.name === '' || itemObj.barcode_number === '' || itemObj.cost === '' || itemObj.srp === '') ? (\r\n                            <Button disabled fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Save</Button>\r\n                            ):itemFormStatus === 'Edit' && (itemObj.name !== '' || itemObj.barcode_number !== '' || itemObj.cost !== '' || itemObj.srp !== '') ? (\r\n                            <Button fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleEdit(e, itemObj)}>Save</Button>\r\n                            ):<Button disabled fullWidth size='large' variant='contained' color='primary' onClick={(e) => handleSubmit(e)}>Submit</Button>\r\n\r\n                            }\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {itemObj.name !== '' || itemObj.barcode_number !== '' || itemObj.cost !== '' || itemObj.srp !== ''? (\r\n                            <Button fullWidth size='large' variant='contained' color='secondary' onClick={(e) => handleClearForm(e)}>Clear</Button>\r\n                            ):<Button disabled fullWidth size='large' variant='contained' color='secondary' onClick={(e) => handleClearForm(e)}>Clear</Button>\r\n                        }\r\n                        </Grid>\r\n                        </Grid>\r\n                        </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n                \r\n            </Grid>   \r\n            <Snackbar anchorOrigin={{vertical: 'bottom', horizontal:'right'}} autoHideDuration={6000} open={message} onClose={handleClose}>\r\n            <Alert variant='filled' elevation={6} onClose={handleClose} severity=\"success\">\r\n                Saved\r\n            </Alert>\r\n            </Snackbar>\r\n            </div>\r\n        );\r\n    }\r\n","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\Receive.js",["58"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { TableContainer, TextField,  } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Table from '@material-ui/core/Table'\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nconst drawerWidth = 500;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\"\r\n      },\r\n      appBar: {\r\n        transition: theme.transitions.create([\"margin\", \"width\"], {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen\r\n        })\r\n      },\r\n      appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create([\"margin\", \"width\"], {\r\n          easing: theme.transitions.easing.easeOut,\r\n          duration: theme.transitions.duration.enteringScreen\r\n        }),\r\n        marginRight: drawerWidth\r\n      },\r\n      title: {\r\n        flexGrow: 1\r\n      },\r\n      hide: {\r\n        display: \"none\"\r\n      },\r\n      drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0\r\n      },\r\n      drawerPaper: {\r\n        width: drawerWidth\r\n      },\r\n      drawerHeader: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: \"flex-start\"\r\n      },\r\n      content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create(\"margin\", {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen\r\n        }),\r\n        marginRight: -drawerWidth\r\n      },\r\n      contentShift: {\r\n        transition: theme.transitions.create(\"margin\", {\r\n          easing: theme.transitions.easing.easeOut,\r\n          duration: theme.transitions.duration.enteringScreen\r\n        }),\r\n        marginRight: 0\r\n      },\r\n\r\n    drawerPaperForm:{\r\n\r\n        minHeight:500,\r\n    },\r\n\r\n    formPaper:{\r\n        backgroundColor:'#D6D6D6',\r\n        minHeight:125,\r\n        marginTop:25,\r\n        margin:5,\r\n    },\r\n\r\n    formTable:{\r\n        backgroundColor:'#D6D6D6',\r\n        minHeight:700,\r\n        marginTop:20,\r\n        margin:5,\r\n\r\n    }\r\n}))\r\n\r\nexport default function Receive() {\r\n    const classes = useStyles();\r\n    const [purchaseOrderList, setPurchaseOrderList] = useState([])\r\n    const [purchaseReceiptForm, setPurchaseReceiptForm] = useState({posting_datetime:new Date().toISOString(),items:[], supplier:'', status:'', invoice_amount:'', purchase_order_number:''})\r\n        useEffect(() => {\r\n        formatDate(purchaseReceiptForm.posting_datetime)\r\n        var url = 'http://127.0.0.1:8000/api/purchaseorder-list-submitted/'\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => setPurchaseOrderList(response))\r\n\r\n        \r\n\r\n    },[])\r\n\r\n    function getCookie(name) {\r\n        let cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            const cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                const cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n\r\n\r\n\r\n    const formatDate = (date) =>{\r\n        var formatDate = new Date(date)\r\n        var year = formatDate.getFullYear();\r\n        var month = (1 + formatDate.getMonth()).toString();\r\n        month = month.length > 1 ? month : '0' + month;\r\n        var day = formatDate.getDate().toString();\r\n        day = day.length > 1 ? day : '0' + day;\r\n        var hour = (formatDate.getHours()).toString();\r\n        hour = hour.length > 1? hour :  '0' + hour;\r\n        var minute = formatDate.getMinutes().toString()\r\n        minute = minute.length > 1 ?  minute: '0' + minute;\r\n        var second = formatDate.getSeconds().toString();\r\n        second = second.length > 1 ?  second: '0' + second;\r\n        setPurchaseReceiptForm({...purchaseReceiptForm, posting_datetime:year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':' + second})\r\n        }\r\n\r\n    const handleDateChange = (e) =>{\r\n        setPurchaseReceiptForm({...purchaseReceiptForm, posting_datetime:e.target.value})\r\n    }\r\n\r\n\r\n    const getPurchaseOrderItems = (e, value) => {\r\n\r\n        try{\r\n            setPurchaseReceiptForm({...purchaseReceiptForm,  purchase_order_number:value.purchase_order_number , supplier:value.supplier, status:'Draft', items:value.items})\r\n            \r\n        }\r\n        catch{\r\n            setPurchaseReceiptForm({...purchaseReceiptForm ,purchase_order_number:'' ,supplier:'', status:'', items:[], invoice_amount:0})\r\n        }\r\n\r\n\r\n       \r\n    }\r\n\r\n\r\n    \r\n    const qtyHandle = (e, item) => {\r\n        setPurchaseReceiptForm({\r\n        ...purchaseReceiptForm,\r\n            items:purchaseReceiptForm.items.map(\r\n            el => el.id === item.id ? {...el, qty:parseInt(e.target.value)}:el\r\n        ),\r\n        })\r\n    }\r\n\r\n    const costHandle = (e, item) => {\r\n        setPurchaseReceiptForm({\r\n            ...purchaseReceiptForm,\r\n            items:purchaseReceiptForm.items.map(\r\n                el => el.id === item.id ? {...el, cost:e.target.value}: el\r\n            )\r\n        })\r\n    }\r\n\r\n    const invoice_amountHandle = (e) => {\r\n        setPurchaseReceiptForm({...purchaseReceiptForm, invoice_amount:e.target.value})\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        var csrftoken = getCookie('csrftoken')\r\n        var url = 'http://127.0.0.1:8000/api/purchasereceipt-create/'\r\n        console.log(purchaseReceiptForm)\r\n        fetch(url,{\r\n            method:'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n            },\r\n            'body' :JSON.stringify(purchaseReceiptForm)\r\n        })\r\n\r\n    }\r\n\r\n    const itemList = {...purchaseReceiptForm}\r\n    const grandTotal = itemList.items.reduce((total, current) => total + (current.qty * current.cost),0)\r\n    const qtyTotal = itemList.items.reduce((total, current) => total + (current.qty),0)\r\n\r\n    \r\n    \r\n\r\n    return(\r\n        <div>\r\n        <Grid container spacing={1}>\r\n            <Grid item xs={6}>\r\n            <Paper className={classes.formPaper}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={5}>\r\n                        <TextField size='small' label='Date' onChange={(e) => handleDateChange(e)} value={purchaseReceiptForm.posting_datetime} style={{marginLeft:10}} fullWidth variant='outlined' type='datetime-local'></TextField>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                    <Autocomplete size='small' onChange ={getPurchaseOrderItems} options={purchaseOrderList} getOptionLabel={(option) => option.purchase_order_number} autoHighlight style={{ width: 300 }} \r\n                        renderInput={(params) => <TextField {...params} label=\"Purchase Order\" variant=\"outlined\" />}/>\r\n                    </Grid>\r\n       \r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={5}>\r\n                        <TextField style={{marginLeft:10}} read_only='true' fullWidth size='small' variant='outlined' label='Supplier' value={purchaseReceiptForm.supplier}></TextField>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <TextField size='small' fullWidth variant='outlined' label='Status' value={purchaseReceiptForm.status}></TextField>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n            <Paper className={classes.formPaper}>\r\n                <Grid style={{marginLeft:5}} container spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <TextField size='small' helperText='Auto Compute' fullWidth variant='outlined' read_only='true' value={grandTotal.toFixed(2)} label='Grand Total:'></TextField>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <TextField size='small' fullWidth variant='outlined' label='Total Qty' value={qtyTotal}></TextField>\r\n                    </Grid>\r\n       \r\n                </Grid>\r\n\r\n                <Grid style={{marginLeft:5}} container spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <TextField size='small' onChange={(e) => {invoice_amountHandle(e)}} fullWidth variant='outlined' type='number' label='Invoice Amount' value={purchaseReceiptForm.invoice_amount}></TextField>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        {purchaseReceiptForm.items.length > 0 ? (\r\n                        <Button variant='contained' onClick={(e) => {handleSubmit(e)}} color='primary'>Submit</Button>\r\n                        ):purchaseReceiptForm.status === 'Submitted' ? (\r\n                        <Button disabled variant='contained' color='secondary'>Cancel</Button>\r\n                        ):(\r\n                        <Button disabled variant='contained' color='secondary'>Submit</Button>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            </Grid>        \r\n        </Grid>\r\n\r\n\r\n\r\n            <Paper className={classes.formTable}>   \r\n                <Grid container spacing={3}>\r\n                    <TableContainer>\r\n                        <Table size='small'>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell width='50%'>Description</TableCell>\r\n                                    <TableCell width='10%'>Qty</TableCell>\r\n                                    <TableCell width='10%'>Rate</TableCell>\r\n                                    <TableCell align='center' width='30%'>Total</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {purchaseReceiptForm.items.map((item,key)=>(\r\n                                    <TableRow hover key={key}>\r\n                                        <TableCell>{item.name}</TableCell>\r\n                                        <TableCell><TextField  type='number' value={item.qty} variant='outlined' onChange={(e) => {qtyHandle(e, item, key)}} size='small'></TextField></TableCell>\r\n                                        <TableCell><TextField  type='number' value={item.cost} variant='outlined' onChange={(e) => {costHandle(e, item, key)}} size='small'></TextField></TableCell>\r\n                                        <TableCell align='center'><TextField read_only='true' variant='outlined' size='small' value={(item.qty * item.cost).toFixed(2)}></TextField></TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Paper>\r\n\r\n\r\n   \r\n        </div>\r\n    )\r\n}","C:\\Users\\baban\\Documents\\project\\frontend\\src\\Pages\\BuyingList.js",["59","60","61","62"],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":14,"column":3,"nodeType":"69","messageId":"70","endLine":16,"endColumn":4},{"ruleId":"71","severity":1,"message":"72","line":245,"column":44,"nodeType":"73","messageId":"74","endLine":245,"endColumn":46},{"ruleId":"75","severity":1,"message":"76","line":106,"column":7,"nodeType":"77","endLine":106,"endColumn":9,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":14},{"ruleId":"79","severity":1,"message":"83","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":18},{"ruleId":"84","severity":1,"message":"85","line":69,"column":9,"nodeType":"86","messageId":"87","endLine":71,"endColumn":12},{"ruleId":"71","severity":1,"message":"72","line":109,"column":61,"nodeType":"73","messageId":"74","endLine":109,"endColumn":63},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formatDate' and 'purchaseReceiptForm.posting_datetime'. Either include them or remove the dependency array.","ArrayExpression",["90"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [formatDate, purchaseReceiptForm.posting_datetime]",{"range":"93","text":"94"},[3282,3284],"[formatDate, purchaseReceiptForm.posting_datetime]"]